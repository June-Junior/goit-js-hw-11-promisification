{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","pause","Promise","resolve","reject","setTimeout","logger","time","console","log","then","delayPlus","msPlus","loggerPlus","timePlus"],"mappings":"0HAKMA,EAAQ,SAAAC,GAEZ,IAAMC,EAAQD,EACd,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACTF,EAAQ,GAAGH,KACVC,OAICK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBR,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,MAAMW,KAAKJ,GAGjB,IAAMK,EAAY,SAAAC,GAEhB,OAAO,IAAIV,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACTF,EAAQ,GAAGS,KACVA,OAICC,EAAa,SAAAC,GAAQ,OAAIN,QAAQC,IAAR,kBAA8BK,EAA9B,OAG/BH,EAAU,MAAMD,KAAKG,GACrBF,EAAU,KAAMD,KAAKG,GACrBF,EAAU,MAAMD,KAAKG,K","file":"main.2be7384cfd1014649a7b.js","sourcesContent":["\r\n// Task 3.1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  const pause = ms;\r\n  return new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve(`${ms}`);\r\n  }, pause);  \r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\nconst delayPlus = msPlus => {\r\n  \r\n  return new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve(`${msPlus}`);\r\n  }, msPlus);  \r\n  });\r\n};\r\n\r\nconst loggerPlus = timePlus => console.log(`Resolved after ${timePlus}ms`);\r\n\r\n\r\ndelayPlus(2500).then(loggerPlus); \r\ndelayPlus(3000).then(loggerPlus); \r\ndelayPlus(3500).then(loggerPlus);\r\n"],"sourceRoot":""}