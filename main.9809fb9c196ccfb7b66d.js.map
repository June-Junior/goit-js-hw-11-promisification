{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","pause","Promise","resolve","reject","setTimeout","logger","time","console","log","then","delayPlus","msPlus","loggerPlus","timePlus","users","name","active","toggleUserState","allUsers","userName","map","user","loggerSecond","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"wJAOMA,EAAQ,SAAAC,GAEZ,IAAMC,EAAQD,EACd,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACTF,EAAQ,GAAGH,KACVC,OAICK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBR,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,MAAMW,KAAKJ,GAGjB,IAAMK,EAAY,SAAAC,GAEhB,OAAO,IAAIV,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACTF,EAAQ,GAAGS,KACVA,OAICC,EAAa,SAAAC,GAAQ,OAAIN,QAAQC,IAAR,kBAA8BK,EAA9B,OAG/BH,EAAU,MAAMD,KAAKG,GACrBF,EAAU,KAAMD,KAAKG,GACrBF,EAAU,MAAMD,KAAKG,GAOrB,IAAME,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIlB,SAAQ,SAACC,EAASC,GAKzBD,EAJqBgB,EAASE,KAAI,SAAAC,GAAI,OACtCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAQ7DC,EAAe,SAAAC,GAAY,OAAIhB,QAAQiB,MAAMD,IAWnDN,EAAgBH,EAAO,SAASL,KAAKa,GACrCL,EAAgBH,EAAO,OAAOL,KAAKa,GAQnC,IAIMG,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCtB,GAL2BqB,EAKM,IALDC,EAKM,IAJrCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAI1B,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACUyB,KAAKE,SAAW,IAGjC7B,EAAQ,CAACwB,cAAapB,SAEtBH,EAAOuB,EAAYM,MAEpB1B,OAID2B,EAAa,SAAC,GAAwB,IAAvBP,EAAuB,EAAvBA,YAAapB,EAAU,EAAVA,KAChCC,QAAQC,IAAR,eAA2BkB,EAAYM,GAAvC,iBAA0D1B,EAA1D,OAGI4B,EAAW,SAAAR,GACfnB,QAAQ4B,KAAR,gCAA6CT,EAA7C,8BAGFD,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/B3B,KAAKwB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/B3B,KAAKwB,GACLI,MAAMH,K","file":"main.9809fb9c196ccfb7b66d.js","sourcesContent":["\r\n// ______________________________________Task 3.1__________________________________________________________________________\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\n// const { resolve, reject } = require(\"core-js/fn/promise\"); - откуда это постоянно берется???\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  const pause = ms;\r\n  return new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve(`${ms}`);\r\n  }, pause);  \r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\nconst delayPlus = msPlus => {\r\n  \r\n  return new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve(`${msPlus}`);\r\n  }, msPlus);  \r\n  });\r\n};\r\n\r\nconst loggerPlus = timePlus => console.log(`Resolved after ${timePlus}ms`);\r\n\r\n\r\ndelayPlus(2500).then(loggerPlus); \r\ndelayPlus(3000).then(loggerPlus); \r\ndelayPlus(3500).then(loggerPlus);\r\n\r\n\r\n// _____________________________________Task 3.2_________________________________________________________________________\r\n\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n      const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n  \r\n      resolve(updatedUsers);\r\n  })\r\n  \r\n};\r\n\r\nconst loggerSecond = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', loggerSecond);\r\n// toggleUserState(users, 'Lux', loggerSecond);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(loggerSecond);\r\ntoggleUserState(users, 'Lux').then(loggerSecond);\r\n\r\n\r\n// _____________________________________Task 3.3_________________________________________________________________________\r\n\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const time = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n  \r\n      if (canProcess) {\r\n        resolve({transaction, time});\r\n      } \r\n        reject(transaction.id);\r\n      \r\n    }, time);\r\n  }); \r\n};\r\n\r\nconst logSuccess = ({transaction, time}) => {\r\n  console.log(`Transaction ${transaction.id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = transaction => {\r\n  console.warn(`Error processing transaction ${transaction}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}